
import weaver.WeaverOptions;
import lcl.LaraCommonLanguage;
import lcl.patterns.PatternsReader;
import lcl.patterns.DetectionAlgorithm;
import lcl.patterns.DetectionAlgorithmLight;
import lcl.patterns.grouping.GroupingUtils;

var PRINT_DETAILS = false;
var PRINT_RELATIONS = false;
var ALGORITHM_LIGHT = false;
var DP_CORE_COMPATIBILITY = false;

aspectdef Relations

	var patternsRootDir = WeaverOptions.getData().getContextFolder() + "/patterns/";

	detect(patternsRootDir + "Observer.pattern");
	detect(patternsRootDir + "Visitor.pattern"); 
	detect(patternsRootDir + "Command.pattern");
	detect(patternsRootDir + "Builder.pattern");
	detect(patternsRootDir + "Bridge.pattern");
	detect(patternsRootDir + "Abstract Factory.pattern");

	// 				C++					Java
	// Observer		5 (4 visitors)	5 3		4 (2 visitors) / 3 3
	// Visitor		4			4 2		2			/ 1 1
	// Command		1			1 1		4 (2 builder)	/ 2 2
	// Builder		1			1 1		2			/ 1 1
	// Bridge			2			2 1		4			/ 4 2
	// Abstract Factory	4			4 4		4			/ 2 1
	
end

function detect(patternFile) {

	print(patternFile.substring(patternFile.lastIndexOf("/") + 1));
	
	var pattern = PatternsReader.readPattern(patternFile);
	if (ALGORITHM_LIGHT) {
		var algorithm = new DetectionAlgorithmLight(pattern.members, pattern.connections);
	}
	else {
		var algorithm = new DetectionAlgorithm(pattern.members, pattern.connections);
	}

	algorithm.setCompatibility(DP_CORE_COMPATIBILITY);
	var detections = algorithm.detect();
	
	print(" => " + detections.length); 
	print(" , " + GroupingUtils.findSuperCandidates(pattern, detections).length); 
	print(" , " + GroupingUtils.findHyperCandidates(pattern, GroupingUtils.findSuperCandidates(pattern, detections)).length); 
	println();
	if (PRINT_RELATIONS) printRelations(algorithm);
	if (PRINT_DETAILS) printDetails(detections);
}

function printDetails(detections) {
	detections.sort((a, b) => {
		if (a[0] > b[0]) return 1;
		if (a[0] < b[0]) return -1;
	  	return 0;
	});
	for (var detection of detections) println(" - " + detection);
	println();
}

function printRelations(algorithm) {

	algorithm.classTypesMap.forEach((classTypeObject, classTypeName) => {
		
		println(classTypeName);
		println(" - calls      " + classTypeObject.relationCalls);
		println(" - creates    " + classTypeObject.relationCreates);
		println(" - has        " + classTypeObject.relationHas);
		println(" - inherits   " + classTypeObject.relationInherits);
		println(" - references " + classTypeObject.relationReferences);
		println(" - uses       " + classTypeObject.relationUses);
	});
}


