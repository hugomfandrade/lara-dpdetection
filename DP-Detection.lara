
import weaver.WeaverOptions;
import lcl.LaraCommonLanguage;
import lcl.patterns.PatternsReader;
import lcl.patterns.DetectionAlgorithm;
import lcl.patterns.DetectionAlgorithmTests;

aspectdef Relations

	var patternsRootDir = WeaverOptions.getData().getContextFolder() + "/patterns/";
	
	detect(patternsRootDir + "Observer.pattern");
	detect(patternsRootDir + "Visitor.pattern");
	detect(patternsRootDir + "Command.pattern");
	detect(patternsRootDir + "Builder.pattern");
	detect(patternsRootDir + "Bridge.pattern");
	detect(patternsRootDir + "Abstract Factory.pattern");

	// 				C++				Java
	// Observer		5 (4 visitors)		4 (2 visitors)
	// Visitor		4				2
	// Command		2 (1 builder)		4 (2 builder)
	// Builder		1				2
	// Bridge			2				4
	// Abstract Factory	4				4
	
end

function detect(patternFile) {
	
	var pattern = PatternsReader.readPattern(patternFile);
	var algorithm = new DetectionAlgorithm(pattern.members, pattern.connections);
	var detections = algorithm.detect();

	print(patternFile.substring(patternFile.lastIndexOf("/") + 1));
	println(" => " + detections.length); 
	for (var detection of detections) println(" - " + detection);
	println();
}


